name: Pre-release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build release and upload asset
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm test
    - name: Install the vsce npm package
      run: |
        npm install
        npm install vsce --save-dev
    - run: |
        npx vsce package
    - run: |
        echo "::set-env name=RELEASE_VERSION::$(npm run get-version --silent)"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
    # - run: |
    #     zip --junk-paths vscode-apprt-bundles-${{ github.ref }} vscode-apprt-bundles-*.vsix
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vscode-apprt-bundles-${{ env.RELEASE_VERSION }}.vsix
        asset_name: vscode-apprt-bundles-${{ env.RELEASE_VERSION }}.vsix
        asset_content_type: application/octet-stream
